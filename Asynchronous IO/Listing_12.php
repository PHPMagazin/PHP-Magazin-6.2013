class Context extends Stackable {  public function run() {  }}class MySqlShared extends Thread {  protected $context;  protected $mysql;  protected $mutex;  protected $offset;  protected $length;  public function __construct($context, $mutex, $mysql, $offset, $length) {    $this->context = $context;    $this->mutex = $mutex;    $this->mysql = $mysql;    $this->offset = $offset;    $this->length = $length;  }  public function run() {    if ($this->mutex) {      Mutex::lock($this->mutex);    }    $result = mysql_query("select * from test limit {$this->offset}, {$this->length}", $this->mysql);    if ($result) {      while (($row = mysql_fetch_assoc($result))) {        $this->context[] = $row;      }    }    if ($this->mutex) {      Mutex::unlock($this->mutex);    }  }}$mysql = mysql_connect("127.0.0.1", "test", "test");mysql_select_db('test', $mysql);if ($mysql) {  $mutex = Mutex::create();  $context = new Context();  $instances = array(    new MySqlShared($context, $mutex, $mysql, 0, 2000),    new MySqlShared($context, $mutex, $mysql, 2001, 2000),    new MySqlShared($context, $mutex, $mysql, 4001, 2500)  );  foreach ($instances as $instance) {    $instance->start();  }  foreach ($instances as $instance) {    $instance->join();  }  Mutex::destroy($mutex);}