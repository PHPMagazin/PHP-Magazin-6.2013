class Container extends \Stackable {  public function run() {}  public function count() {    return $this['counter'] = $this['counter'] + 1;  }  public function getCounter() {    return $this['counter'];  }}class Test extends Thread {  protected $container;  protected $socket;  public function __construct($container, $socket) {    $this->container = $container;    $this->socket = $socket;  }  public function run() {    $response = array(      "head" => "HTTP/1.0 200 OK\r\nContent-Type: text/html\r\n",      "body" => '<html><head><title>Some title</title></head><body><p>Some content</p></body></html>'    );    while ($client = socket_accept($this->socket)) {      $buffer = '';      while ($buffer .= socket_read($client, 1024)) {        if (false !== strpos($buffer, "\r\n\r\n")) {          break;        }      }      socket_write($client, implode("\r\n", $response));      socket_close($client);      if ($this->container->count() > 96) {        return;      }    }  }}$workers = array();$socket = socket_create_listen($argv[1]);if ($socket) {  $container = new Container();  $worker = 0;  while (++$worker < 5) {    $workers[$worker] = new Test($container, $socket);    $workers[$worker]->start();  }  printf("%d threads waiting on port %d", count($workers), $argv[1]);  foreach ($workers as $worker) {    $worker->join();  }  printf("Successfully served %d requests\n", $container->getCounter());}